//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ilc.SampleHarvester.AdventureWorks.SampleService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SampleService.ISampleService")]
    public interface ISampleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadCompanyByName", ReplyAction="http://tempuri.org/ISampleService/LoadCompanyByNameResponse")]
        System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company> LoadCompanyByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadCompanyByName", ReplyAction="http://tempuri.org/ISampleService/LoadCompanyByNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company>> LoadCompanyByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadCompany", ReplyAction="http://tempuri.org/ISampleService/LoadCompanyResponse")]
        Ilc.BusinessObjects.Common.Company LoadCompany(long businessEntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadCompany", ReplyAction="http://tempuri.org/ISampleService/LoadCompanyResponse")]
        System.Threading.Tasks.Task<Ilc.BusinessObjects.Common.Company> LoadCompanyAsync(long businessEntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadCompanyByContactEmail", ReplyAction="http://tempuri.org/ISampleService/LoadCompanyByContactEmailResponse")]
        System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company> LoadCompanyByContactEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadCompanyByContactEmail", ReplyAction="http://tempuri.org/ISampleService/LoadCompanyByContactEmailResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company>> LoadCompanyByContactEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/ExtendCompany", ReplyAction="http://tempuri.org/ISampleService/ExtendCompanyResponse")]
        Ilc.BusinessObjects.Common.Company ExtendCompany(Ilc.BusinessObjects.Common.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/ExtendCompany", ReplyAction="http://tempuri.org/ISampleService/ExtendCompanyResponse")]
        System.Threading.Tasks.Task<Ilc.BusinessObjects.Common.Company> ExtendCompanyAsync(Ilc.BusinessObjects.Common.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadContactsByCompany", ReplyAction="http://tempuri.org/ISampleService/LoadContactsByCompanyResponse")]
        System.Collections.Generic.List<Ilc.BusinessObjects.Common.ContactPerson> LoadContactsByCompany(Ilc.BusinessObjects.Common.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadContactsByCompany", ReplyAction="http://tempuri.org/ISampleService/LoadContactsByCompanyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.ContactPerson>> LoadContactsByCompanyAsync(Ilc.BusinessObjects.Common.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadProductByCompany", ReplyAction="http://tempuri.org/ISampleService/LoadProductByCompanyResponse")]
        System.Collections.Generic.List<Ilc.BusinessObjects.Common.Product> LoadProductByCompany(Ilc.BusinessObjects.Common.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/LoadProductByCompany", ReplyAction="http://tempuri.org/ISampleService/LoadProductByCompanyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.Product>> LoadProductByCompanyAsync(Ilc.BusinessObjects.Common.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetProductPhoto", ReplyAction="http://tempuri.org/ISampleService/GetProductPhotoResponse")]
        System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> GetProductPhoto(string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetProductPhoto", ReplyAction="http://tempuri.org/ISampleService/GetProductPhotoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>> GetProductPhotoAsync(string productId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceChannel : Ilc.SampleHarvester.AdventureWorks.SampleService.ISampleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SampleServiceClient : System.ServiceModel.ClientBase<Ilc.SampleHarvester.AdventureWorks.SampleService.ISampleService>, Ilc.SampleHarvester.AdventureWorks.SampleService.ISampleService {
        
        public SampleServiceClient() {
        }
        
        public SampleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SampleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company> LoadCompanyByName(string name) {
            return base.Channel.LoadCompanyByName(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company>> LoadCompanyByNameAsync(string name) {
            return base.Channel.LoadCompanyByNameAsync(name);
        }
        
        public Ilc.BusinessObjects.Common.Company LoadCompany(long businessEntityId) {
            return base.Channel.LoadCompany(businessEntityId);
        }
        
        public System.Threading.Tasks.Task<Ilc.BusinessObjects.Common.Company> LoadCompanyAsync(long businessEntityId) {
            return base.Channel.LoadCompanyAsync(businessEntityId);
        }
        
        public System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company> LoadCompanyByContactEmail(string email) {
            return base.Channel.LoadCompanyByContactEmail(email);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.Company>> LoadCompanyByContactEmailAsync(string email) {
            return base.Channel.LoadCompanyByContactEmailAsync(email);
        }
        
        public Ilc.BusinessObjects.Common.Company ExtendCompany(Ilc.BusinessObjects.Common.Company company) {
            return base.Channel.ExtendCompany(company);
        }
        
        public System.Threading.Tasks.Task<Ilc.BusinessObjects.Common.Company> ExtendCompanyAsync(Ilc.BusinessObjects.Common.Company company) {
            return base.Channel.ExtendCompanyAsync(company);
        }
        
        public System.Collections.Generic.List<Ilc.BusinessObjects.Common.ContactPerson> LoadContactsByCompany(Ilc.BusinessObjects.Common.Company company) {
            return base.Channel.LoadContactsByCompany(company);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.ContactPerson>> LoadContactsByCompanyAsync(Ilc.BusinessObjects.Common.Company company) {
            return base.Channel.LoadContactsByCompanyAsync(company);
        }
        
        public System.Collections.Generic.List<Ilc.BusinessObjects.Common.Product> LoadProductByCompany(Ilc.BusinessObjects.Common.Company company) {
            return base.Channel.LoadProductByCompany(company);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ilc.BusinessObjects.Common.Product>> LoadProductByCompanyAsync(Ilc.BusinessObjects.Common.Company company) {
            return base.Channel.LoadProductByCompanyAsync(company);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> GetProductPhoto(string productId) {
            return base.Channel.GetProductPhoto(productId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>> GetProductPhotoAsync(string productId) {
            return base.Channel.GetProductPhotoAsync(productId);
        }
    }
}
